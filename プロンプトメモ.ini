gmo_history.csvはgmoクリック証券のCFD取引履歴のサンプルです。convert_encoding.pyは文字化けしないようにエンコーディングするプログラム、gmo_history_converted.csvはエンコーディングされたcsvファイル、process_gmo_history.pyは米国NQ100ミニの取引の必要な情報のみを抽出するプログラムです。

抽出したデータをpinescriptで使えるように変換したいので、まずprocess_gmo_history.pyに抽出したデータの約定日時を　timestamp(timezone, year, month, day, hour, minute, second)　の形式に変換するプログラムを追加してください。timezoneは"GMT+9"にしてください。

tradecategoryとして、取引区分がCFD新規で売買区分が買の場合はLongEntry、取引区分がCFD新規で売買区分が売の場合はShortEntry、取引区分がCFD決済かで売買区分が売で実現損益（円貨）が0以上の場合はLongGain、取引区分がCFD決済かCFDロスカットで売買区分が売で実現損益（円貨）が0未満の場合はLongLoss、取引区分がCFD決済かで売買区分が買で実現損益（円貨）が0以上の場合はShortGain、取引区分がCFD決済かCFDロスカットで売買区分が買で実現損益（円貨）が0未満の場合はShortLossにしてください。

color0 =input.color(color.white)
colorLe =input.color(color.aqua)
colorLg =input.color(color.green)
colorLl =input.color(color.blue)
colorSe =input.color(color.fuchsia)
colorSg =input.color(color.orange)
colorSl =input.color(color.red)

//trade1
trade1timesamp = timestamp()
var int trade1time = na
var float trade1price = na
if time_close[1] <=trade1entry and time_close>trade1entry
    trade1entrytime :=time
    trade1entryprice := close

trade1pricemin = request.security(syminfo.tickerid , reference , trade1price)
trade1category ="Le"
color trade1color = trade1category =="Le"?colorLe : trade1category =="Lg"?colorLg : trade1category =="Ll"?colorLl : trade1category =="Se"?colorSe : trade1category =="Sg"?colorSg : trade1category =="Sl"?colorSl : color0
string trade1label = trade1category =="Le"?"up" : trade1category =="Lg"?"down" : trade1category =="Ll"?"down" : trade1category =="Se"?"down" : trade1category =="Sg"?"up" : trade1category =="Sl"?"up" : "up"

if barstate.islast
    trade1label = label.new(trade1time ,trade1pricemin ,trade1category ,xloc.bar_time ,color=trade1color ,style = trade1label =="up"? label.style_label_up :label.style_label_down  ,textcolor = color0 ,size =textsize1)    

次にtrade_plotter_pinescript.txt の中の<1A>をtradeIDがtrade1のpineTimestampの値に置き換え、<1B>をtradeIDがtrade1のtradeCategoryの値に置き換えるスクリプトを追加してください。

変更します。tradecategoryとして、取引区分がCFD新規で売買区分が買の場合はLe、取引区分がCFD新規で売買区分が売の場合はSe、取引区分がCFD決済かで売買区分が売で実現損益（円貨）が0以上の場合はLg、取引区分がCFD決済かCFDロスカットで売買区分が売で実現損益（円貨）が0未満の場合はLl、取引区分がCFD決済かで売買区分が買で実現損益（円貨）が0以上の場合はSg、取引区分がCFD決済かCFDロスカットで売買区分が買で実現損益（円貨）が0未満の場合はSlにしてください。上記のいずれにも該当しない場合はUnknownのままでOKです。
 
convert_encoding.pyとprocess_gmo_history.pyとupdate_pinescript.pyの一連の流れを他の人も行えるようにアプリ化したいです。最終目標としては、アプリを起動→各自の取引履歴のcsvファイルを選択→取引履歴のcsvファイルを解析して銘柄名を抽出→ユーザーに銘柄名を選択させる。→選択した銘柄名の取引数を解析。ユーザーにtradeいくつからtradeいくつまでを処理するか選択させる。（最大100件）→選択したtradeをprocessed_trades.jsonの形式で保存→最終的にtrade_plotter_pinescript_updated.txtのテキストファイルを生成。　というアプリを作りたいので順番に作業開始してください。











